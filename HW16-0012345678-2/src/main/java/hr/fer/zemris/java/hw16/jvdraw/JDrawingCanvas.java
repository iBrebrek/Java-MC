package hr.fer.zemris.java.hw16.jvdraw;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JComponent;

import hr.fer.zemris.java.hw16.jvdraw.model.DrawingModel;
import hr.fer.zemris.java.hw16.jvdraw.model.DrawingModelListener;
import hr.fer.zemris.java.hw16.jvdraw.model.geometrics.GeometricalObject;

/**
 * Canvas uses factory (which is given in constructor) 
 * to create new objects.
 * <p>
 * When canvas is clicked first time it will
 * call {@link GeometricalObject#onStartChange(java.awt.Point)}
 * on object generated by factory.
 * On second click it will call 
 * {@link GeometricalObject#onEndChange(java.awt.Point)}
 * and add that object to given model.
 * </p>
 * 
 * @author Ivica Brebrek
 * @version 1.0  (1.7.2016.)
 */
public class JDrawingCanvas extends JComponent implements DrawingModelListener {
	/** For serialization. */
	private static final long serialVersionUID = 1L;
	
	/** Model with all object being painted on this canvas. */
	private final DrawingModel model;
	/** Object currently being painted. */
    private GeometricalObject current;

    /**
     * Initializes new drawing canvas.
     * 
     * @param model		model with objects that will be painted.
     * @param factory	factory which now how to generate new objects.
     */
	public JDrawingCanvas(DrawingModel model, ObjectFactory factory) {
		this.model = model;
		model.addDrawingModelListener(this);
		
		setForeground(Color.WHITE);
		
		MouseAdapter myAdapter = new MouseAdapter() {
			boolean second = false;

			public void mousePressed(MouseEvent e) {
				if(!second) {
					current = factory.generate();
					if(current == null) {
						return;
					}
					current.onStartChange(e.getPoint());
				} else {
					current.onEndChange(e.getPoint());
					model.add(current);
					current = null;
				}
				second = !second; 
			}
			public void mouseMoved(MouseEvent e) {
				if(second) {
					current.onEndChange(e.getPoint());
					repaint();
				}
			}
		};

		addMouseListener(myAdapter);
		addMouseMotionListener(myAdapter);
	}
	
	@Override
	public void paint(Graphics g) {
        super.paint(g);
        if (current != null) {
            current.paint(g);
        }
    }

	@Override
	public void objectsAdded(DrawingModel source, int index0, int index1) {
		repaint();
	}

	@Override
	public void objectsRemoved(DrawingModel source, int index0, int index1) {
		repaint();
	}

	@Override
	public void objectsChanged(DrawingModel source, int index0, int index1) {
		repaint();
	}
	
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		((Graphics2D) g).setRenderingHint(
				RenderingHints.KEY_ANTIALIASING, 
				RenderingHints.VALUE_ANTIALIAS_ON
		);
 		for(int i = 0, total = model.getSize(); i < total; i++) {
			model.getObject(i).paint(g);
		}
	}
}